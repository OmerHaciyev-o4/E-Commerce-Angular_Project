{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { User } from './user';\nimport { UserBase } from './userBase';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.API_KEY = \"AIzaSyAbL8n_ihw3a_8yltDY7v9Nj-kEYz4lafU\";\n      this.SIGN_UP = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=\" + this.API_KEY;\n      this.SIGN_IN = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\" + this.API_KEY;\n      this.user = new BehaviorSubject(null);\n      this.userBase = new BehaviorSubject(null);\n    }\n\n    register(email, password) {\n      return this.httpClient.post(this.SIGN_UP, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(tap(response => {\n        this.handleAuthentication(response.email, response.localId, response.idToken, +response.expiresIn, password);\n      }));\n    }\n\n    login(email, password) {\n      return this.httpClient.post(this.SIGN_IN, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(tap(response => {\n        this.handleAuthentication(response.email, response.localId, response.idToken, +response.expiresIn, password);\n      }));\n    }\n\n    autoLogin() {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      const userBase = JSON.parse(localStorage.getItem(\"userBase\"));\n      if (!user && !userBase) return;\n      const loadedUser = new User(user.email, user.id, user._token, new Date(user._tokenExpiration));\n\n      if (loadedUser.token && userBase) {\n        this.user.next(loadedUser);\n        this.userBase.next(userBase);\n      }\n    }\n\n    logout() {\n      this.user.next(null);\n      this.userBase.next(null);\n      localStorage.removeItem(\"user\");\n      localStorage.removeItem(\"userBase\");\n    }\n\n    handleAuthentication(email, userId, token, expiresIn, password) {\n      const expirationDate = new Date(new Date().getTime() + Number(expiresIn) * 1000);\n      const user = new User(email, userId, token, expirationDate);\n      const userBase = new UserBase(email, password, \"user\");\n      if (email == \"omer04118102@gmail.com\" || email == \"elvincamalzade00@gmail.com\") userBase.role = \"admin\";\n      this.user.next(user);\n      this.userBase.next(userBase);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      localStorage.setItem(\"userBase\", JSON.stringify(userBase));\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}