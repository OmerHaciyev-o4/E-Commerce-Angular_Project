{"ast":null,"code":"import { catchError, delay, map, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BrandService = /*#__PURE__*/(() => {\n  class BrandService {\n    constructor(httpClient) {\n      this.httpClient = httpClient; // url = 'https://e-commerce-2a651-default-rtdb.firebaseio.com/';\n\n      this.url = 'https://e-commerce-angular-df9dd-default-rtdb.firebaseio.com/';\n    }\n\n    getBrands() {\n      var newURL = this.url + 'brands.json';\n      return this.httpClient.get(newURL).pipe(map(response => {\n        const brands = [];\n\n        for (const key in response) {\n          brands.push({ ...response[key],\n            id: key\n          });\n        }\n\n        return brands;\n      }), tap(data => {}), catchError(this.handleError), delay(30));\n    }\n\n    createBrand(brand) {\n      var newURL = this.url + 'brands.json';\n      return this.httpClient.post(newURL, brand).pipe(tap(data => {}), catchError(this.handleError));\n    }\n\n    deleteBrand(brand) {\n      const newURL = this.url + \"brands\" + (brand ? \"/\" + brand.toString() : \"\") + \".json\";\n      return this.httpClient.delete(newURL);\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.log(\"Error : \" + error.error.message);\n      } else {\n        switch (error.status) {\n          case 404:\n            console.log(\"Not Found\");\n            break;\n\n          case 403:\n            console.log(\"Access Denied\");\n            break;\n\n          case 500:\n            console.log(\"Internal server\");\n            break;\n\n          default:\n            console.log(\"some unknow error happened\");\n        }\n      }\n\n      return throwError(() => new Error(\"some error happened\"));\n    }\n\n  }\n\n  BrandService.ɵfac = function BrandService_Factory(t) {\n    return new (t || BrandService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BrandService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BrandService,\n    factory: BrandService.ɵfac,\n    providedIn: 'root'\n  });\n  return BrandService;\n})();","map":null,"metadata":{},"sourceType":"module"}