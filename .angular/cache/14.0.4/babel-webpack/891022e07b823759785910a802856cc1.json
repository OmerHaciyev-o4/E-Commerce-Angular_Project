{"ast":null,"code":"import { catchError, delay, map, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.url = \"https://e-commerce-2a651-default-rtdb.firebaseio.com/\";\n    }\n\n    getProducts(brandId) {\n      var newURL = this.url + \"products.json\";\n      return this.httpClient.get(newURL).pipe(map(response => {\n        const products = [];\n\n        for (const key in response) {\n          if (brandId) {\n            if (brandId.toString() == response[key].brandId) {\n              products.push({ ...response[key],\n                id: key\n              });\n            }\n          } else {\n            products.push({ ...response[key],\n              id: key\n            });\n          }\n        }\n\n        return products;\n      }), tap(data => {}), catchError(this.handleError), delay(118));\n    }\n\n    createProduct(product) {\n      return this.httpClient.post(this.url + 'products.json', product).pipe(tap(data => {}), catchError(this.handleError));\n    }\n\n    updateProduct(product) {\n      var newURL = this.url + 'products/' + product.id + '.json';\n      return this.httpClient.put(newURL, product).pipe(tap(data => {}), catchError(this.handleError));\n    }\n\n    deleteProduct(productId) {\n      var newURL = this.url + \"products/\" + productId + \".json\";\n      return this.httpClient.delete(newURL).pipe(tap(() => {}), catchError(this.handleError));\n    }\n\n    getProductById(productId) {\n      return this.httpClient.get(this.url + \"products/\" + productId + \".json\").pipe(map(response => {\n        const product = { ...response,\n          id: productId\n        };\n        return product;\n      }), tap(data => {}), catchError(this.handleError));\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.log(\"Error : \" + error.error.message);\n      } else {\n        switch (error.status) {\n          case 404:\n            console.log(\"Not Found\");\n            break;\n\n          case 403:\n            console.log(\"Access Denied\");\n            break;\n\n          case 500:\n            console.log(\"Internal server\");\n            break;\n\n          default:\n            console.log(\"some unknow error happened\");\n        }\n      }\n\n      return throwError(() => new Error(\"some error happened\"));\n    }\n\n  }\n\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}